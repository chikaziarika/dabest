"""
Django settings for dabest project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import six
from dotenv import load_dotenv, find_dotenv
from decouple import config
from django.utils.translation import gettext_lazy as _
import socket
from typing import Any, Dict
from django.conf.global_settings import LANGUAGES as DJANGO_LANGUAGES
socket.getaddrinfo('localhost', 8080)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dc!ee&bib=3f_8zl)6(d#f2&zy&_q4je+rulz3(=u&bb=nyv7r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = ['testserver', '127.0.0.1', 'www.dabestconsultant.com','dabestconsultant.com']
ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'jazzmin',
    # "sslserver",
    # 'livereload',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'main.apps.MainConfig',
    'news.apps.NewsConfig',
    'info.apps.InfoConfig',
    'article.apps.ArticleConfig',
    'widget_tweaks',
    'rest_framework',
    'rest_framework_datatables',
    'django_ckeditor_5',
    # 'social_django',
    'django.contrib.humanize',
    'gdstorage',
    'gdpstorage',
    'rosetta',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    "django_check_seo",
    "django_extensions",
    "crispy_forms",
    "crispy_bootstrap5",
    'instagram_profile',
    'phone_field',
    
    
    

    'allauth.socialaccount.providers.google',
]

SITE_ID = 1


GOOGLE_DRIVE_STORAGE_JSON_KEY_FILE = os.path.join(BASE_DIR,'resume.json')
# GOOGLE_DRIVE_STORAGE_MEDIA_ROOT = '/DriveUploader/'
GOOGLE_DRIVE_STORAGE_SERVICE_EMAIL = 't-689-999@resume-421403.iam.gserviceaccount.com'
GOOGLE_DRIVE_STORAGE_KEY = 'AIzaSyDW2nwt9x49MrPMlCfeKUmSBjByGu9qcDU'

# DEFAULT_FILE_STORAGE = "gdpstorage.storage.GoogleDriveStorage"

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    # 'django.middleware.cache.UpdateCacheMiddleware',
    # 'htmlmin.middleware.HtmlMinifyMiddleware',
    'django.middleware.common.BrokenLinkEmailsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    "django.contrib.sessions.middleware.SessionMiddleware",
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "django.middleware.gzip.GZipMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    # 'htmlmin.middleware.HtmlMinifyMiddleware',
    # 'htmlmin.middleware.MarkRequestMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',
    # 'htmlmin.middleware.MarkRequestMiddleware',
    # 'main.middleware.LanguageMiddleware',
]



HTML_MINIFY = True

ROOT_URLCONF = 'dabest.urls'

TEMPLATES_DIRS = [
    os.path.join(BASE_DIR, 'main', 'templates'),
    os.path.join(BASE_DIR, 'main', 'templates', 'allauth', 'templates')
]

TEMPLATE_LOADERS = [
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
    # 'django.template.loaders.eggs.Loader',
]


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': TEMPLATES_DIRS,
        'APP_DIRS': True,
        'OPTIONS': {
            'debug': False,
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                
            ],  
        },
    },
]

WSGI_APPLICATION = 'dabest.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': 'DB_DABEST',
#         'USER': 'adminDabest',
#         'PASSWORD': '@D48eST1908!',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }



# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        'rest_framework_datatables.renderers.DatatablesRenderer',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework_datatables.filters.DatatablesFilterBackend',
    ),
}


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'id'

LANGUAGE = (
    ('id', _('Indonesian')),
    ('en', _('English')),
)


LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale/'),
)

TIME_ZONE = 'Asia/Jakarta'
# LANGUAGE_CODE = "en"
USE_I18N = True
USE_L10N = True

USE_TZ = True

# LANGUAGES = DJANGO_LANGUAGES
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
if DEBUG:
    STATICFILES_DIRS=['staticfiles']
    STATIC_ROOT = None
else:
    STATICFILES_DIRS=[]
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')



STATIC_URL = '/static/'
STATIC_URL_CSS = '/static/css'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'static')
]
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]


MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
print('nih.....', BASE_DIR)
FILES_ROOT = os.path.join(BASE_DIR, 'files')
FILES_URL = '/files/'
LOCATION_ADS = [
    os.path.join('ads.txt')
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

ENV_FILE = find_dotenv()
if ENV_FILE:
    load_dotenv(ENV_FILE)

# AUTH0_DOMAIN = os.environ.get("AUTH0_DOMAIN")
# AUTH0_CLIENT_ID = os.environ.get("AUTH0_CLIENT_ID")
# AUTH0_CLIENT_SECRET = os.environ.get("AUTH0_CLIENT_SECRET")
CKEDITOR_UPLOAD_PATH = "uploads/"


AUTH_USER_MODEL = 'main.User'

# Auth0 settings
SOCIAL_AUTH_TRAILING_SLASH = False  # Remove trailing slash from routes
SOCIAL_AUTH_AUTH0_DOMAIN = os.environ.get("AUTH0_DOMAIN")
SOCIAL_AUTH_AUTH0_KEY = os.environ.get("AUTH0_CLIENT_ID")
SOCIAL_AUTH_AUTH0_SECRET = os.environ.get("AUTH0_CLIENT_SECRET")
SOCIAL_AUTH_AUTH0_SCOPE = [
    'openid',
    'profile',
    'email'
]



LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
SOCIAL_AUTH_REDIRECT_IS_HTTPS = True

CKEDITOR_STORAGE_BACKEND = 'django.core.files.storage.FileSystemStorage'

customColorPalette = [
        {
            'color': 'hsl(4, 90%, 58%)',
            'label': 'Red'
        },
        {
            'color': 'hsl(340, 82%, 52%)',
            'label': 'Pink'
        },
        {
            'color': 'hsl(291, 64%, 42%)',
            'label': 'Purple'
        },
        {
            'color': 'hsl(262, 52%, 47%)',
            'label': 'Deep Purple'
        },
        {
            'color': 'hsl(231, 48%, 48%)',
            'label': 'Indigo'
        },
        {
            'color': 'hsl(207, 90%, 54%)',
            'label': 'Blue'
        },
    ]

CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': ['heading', '|', 'bold', 'italic', 'link',
                    'bulletedList', 'numberedList', 'blockQuote', 'imageUpload', ],

    },
    'extends': {
        'blockToolbar': [
            'paragraph', 'heading1', 'heading2', 'heading3',
            '|',
            'bulletedList', 'numberedList',
            '|',
            'blockQuote',
        ],
        'toolbar': ['heading', '|', 'outdent', 'indent', '|', 'bold', 'italic', 'link', 'underline', 'strikethrough',
        'code','subscript', 'superscript', 'highlight', '|', 'codeBlock', 'sourceEditing', 'insertImage',
                    'bulletedList', 'numberedList', 'todoList', '|',  'blockQuote', 'imageUpload', '|',
                    'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'mediaEmbed', 'removeFormat',
                    'insertTable',],
        'image': {
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft',
                        'imageStyle:alignRight', 'imageStyle:alignCenter', 'imageStyle:side',  '|'],
            'styles': [
                'full',
                'side',
                'alignLeft',
                'alignRight',
                'alignCenter',
            ]

        },
        'table': {
            'contentToolbar': [ 'tableColumn', 'tableRow', 'mergeTableCells',
            'tableProperties', 'tableCellProperties' ],
            'tableProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            },
            'tableCellProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            }
        },
        'heading' : {
            'options': [
                { 'model': 'paragraph', 'title': 'Paragraph', 'class': 'ck-heading_paragraph' },
                { 'model': 'heading1', 'view': 'h1', 'title': 'Heading 1', 'class': 'ck-heading_heading1' },
                { 'model': 'heading2', 'view': 'h2', 'title': 'Heading 2', 'class': 'ck-heading_heading2' },
                { 'model': 'heading3', 'view': 'h3', 'title': 'Heading 3', 'class': 'ck-heading_heading3' }
            ]
        }
    },
    'list': {
        'properties': {
            'styles': 'true',
            'startIndex': 'true',
            'reversed': 'true',
        }
    }
}

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ]
}

INSTAGRAM_PROFILE = {
    # You will get these from your registered instagram app
    'app_id': '2314432312087145',
    'secret': 'decf71c837d329b36a7fb4452b1af329',
    # 'redirect_url': 'https://127.0.0.1:8000/'     
    'redirect_url': 'https://dabestconsultant.com/'     
}


# code = '''AQCj2ueTx0dysNV1Ct4zK6jMU3Gu-OGO1warjChXQWkU6ZfD2f38Vq1SUG8xaGbAd0pAsyrY0ol0GO49oECmj_CBIZL6yzCmNs9YPGyPDT5pQ152XJjIGsiWg9w1t7-BmmnPqOIO1PIbVjXsmKfz2Ewr-OXeFIziLQizPdwRwe_JmWkwjYLA5Rh74VqKtO77fMR56B1eQwIHShSuekMFtTSXI74mjfSPrhNnRn4d0AugBA'''

# long_lived_token = '''AQBpoCks_xrUEEXDINSKEosyqMxCfPBHFgFGZumsqKmmi6DBYZc7StU6ScZOmRumFzFV9dvyZdBrH9yAB_e09yDvYE7rWsNB93_LDRvxqb-gvlQ1Q_b5ChHN0-STsGS8j6O74B5duKci1lj3S9TdI-Y4k0a4xhuHPa_0pXa4eejX_kFDQuaI5aZO3YU7SpgRcK9s5YADwL6lJaDrdLCUDriAK0pC-5JTkxiz58gFRk9LaA'''

# url = f"https://graph.instagram.com/refresh_token?grant_type=ig_refresh_token%access_token={long_lived_token}"
# cliend_id = 2314432312087145
# client_secret = 'decf71c837d329b36a7fb4452b1af329'

# redirect_uri = 'https://127.0.0.1:8000/'

# post_obj = { "client_id":cliend_id,"client_secret":client_secret,"grant_type":'authorization_code','redirect_uri':redirect_uri,'code':code }


# response
# <Response [200]>

# response.text
# '{"access_token":"AQBpoCks_xrUEEXDINSKEosyqMxCfPBHFgFGZumsqKmmi6DBYZc7StU6ScZOmRumFzFV9dvyZdBrH9yAB_e09yDvYE7rWsNB93_LDRvxqb-gvlQ1Q_b5ChHN0-STsGS8j6O74B5duKci1lj3S9TdI-Y4k0a4xhuHPa_0pXa4eejX_kFDQuaI5aZO3YU7SpgRcK9s5YADwL6lJaDrdLCUDriAK0pC-5JTkxiz58gFRk9LaA", "token_type":"bearer","expires_in":5167731}'

SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
USE_THOUSAND_SEPARATOR = True
X_FRAME_OPTIONS = 'SAMEORIGIN'


JAZZMIN_SETTINGS: Dict[str, Any] = {
    # title of the window (Will default to current_admin_site.site_title if absent or None)
    "site_title": "DABEST Admin",
    # Title on the brand, and login screen (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_header": "DABEST ADMIN",
    # Logo to use for your site, must be present in static files, used for brand on top left
    "site_logo": "../static/images/LDW2.png",
    # Relative path to logo for your site, used for login logo (must be present in static files. Defaults to site_logo)
    "login_logo": "../static/images/LDW2.png",
    # Logo to use for login form in dark themes (must be present in static files. Defaults to login_logo)
    "login_logo_dark": "books/img/logo-login-dark-mode.png",
    # CSS classes that are applied to the logo
    "site_logo_classes": None,
    # Relative path to a favicon for your site, will default to site_logo if absent (ideally 32x32 px)
    "site_icon": "../static/images/LDW2.png",
    # Welcome text on the login screen
    "welcome_sign": "Welcome to DABEST Admin",
    # Copyright on the footer
    "copyright": "DABEST - IT SUPPORT",
    # List of model admins to search from the search bar, search bar omitted if excluded
    # If you want to use a single search field you dont need to use a list, you can use a simple string
    "search_model": ["auth.User", "auth.Group"],
    # Field name on user model that contains avatar ImageField/URLField/Charfield or a callable that receives the user
    "user_avatar": None,
    ############
    # Top Menu #
    ############
    # Links to put along the top menu
    "topmenu_links": [
        # Url that gets reversed (Permissions can be added)
        {"name": "Home", "url": "admin:index", "permissions": ["auth.view_user"]},
        # external url that opens in a new window (Permissions can be added)
        {"name": "Support", "url": "https://github.com/farridav/django-jazzmin/issues", "new_window": True},
        # model admin to link to (Permissions checked against model)
        {"model": "auth.User"},
        # App with dropdown menu to all its models pages (Permissions checked against models)
        {"app": "books"},
        {"app": "loans"},
    ],
    #############
    # User Menu #
    #############
    # Additional links to include in the user menu on the top right ('app' url type is not allowed)
    "usermenu_links": [
        {"name": "Support", "url": "https://github.com/farridav/django-jazzmin/issues", "new_window": True},
        {"model": "auth.user"},
    ],
    #############
    # Side Menu #
    #############
    # Whether to display the side menu
    "show_sidebar": True,
    # Whether to aut expand the menu
    "navigation_expanded": True,
    # Hide these apps when generating side menu e.g (auth)
    "hide_apps": [],
    # Hide these models when generating side menu (e.g auth.user)
    "hide_models": [],
    # List of apps to base side menu (app or model) ordering off of
    "order_with_respect_to": ["Make Messages", "auth", "books", "books.author", "books.book", "loans"],
    # Custom links to append to app groups, keyed on app name
    "custom_links": {
        "loans": [
            {
                "name": "Make Messages",
                "url": "make_messages",
                "icon": "fas fa-comments",
                "permissions": ["loans.view_loan"],
            },
            {"name": "Custom View", "url": "admin:custom_view", "icon": "fas fa-box-open"},
        ]
    },
    # Custom icons for side menu apps/models See the link below
    # https://fontawesome.com/icons?d=gallery&m=free&v=5.0.0,5.0.1,5.0.10,5.0.11,5.0.12,5.0.13,5.0.2,5.0.3,5.0.4,5.0.5,5.0.6,5.0.7,5.0.8,5.0.9,5.1.0,
    # 5.1.1,5.2.0,5.3.0,5.3.1,5.4.0,5.4.1,5.4.2,5.13.0,5.12.0,
    # 5.11.2,5.11.1,5.10.0,5.9.0,5.8.2,5.8.1,5.7.2,5.7.1,5.7.0,5.6.3,5.5.0,5.4.2
    # for the full list of 5.13.0 free icon classes
    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
        "admin.LogEntry": "fas fa-file",
        "books.Author": "fas fa-user",
        "books.Book": "fas fa-book",
        "books.Genre": "fas fa-photo-video",
        "loans.BookLoan": "fas fa-book-open",
        "loans.Library": "fas fa-book-reader",
        "main.UploadApplicant": "fas fa-user-clock",
        "main.ApprovedApplicant": "fas fa-user-check",
        "main.RejectApplicant": "fas fa-user-slash",
        "main.ReviewApplicant": "fas fa-user-edit",
        "main.Tag": "fas fa-tags",
        "article.Tag": "fas fa-tags",
        "main.Career": "fas fa-briefcase",
        "main.DepartementList": "fas fa-sitemap",
        "main.InputApplicant": "fas fa-user-cog",
        "main.EmployeeTypeList": "fas fa-file-signature",
        'main.News':"far fa-newspaper",
        'main.Project':"fas fa-project-diagram",
        'article.Article':"fas fa-newspaper",
        'article.Comment':"fas fa-comments",
    },
    # Icons that are used when one is not manually specified
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",
    #################
    # Related Modal #
    #################
    # Activate Bootstrap modal
    "related_modal_active": False,
    #############
    # UI Tweaks #
    #############
    # Relative paths to custom CSS/JS scripts (must be present in static files)
    "custom_css": None,
    "custom_js": None,
    # Whether to show the UI customizer on the sidebar
    "show_ui_builder": True,
    ###############
    # Change view #
    ###############
    # Render out the change view as a single form, or in tabs, current options are
    # - single
    # - horizontal_tabs (default)
    # - vertical_tabs
    # - collapsible
    # - carousel
    "changeform_format": "horizontal_tabs",
    # override change forms on a per modeladmin basis
    "changeform_format_overrides": {"auth.user": "collapsible", "auth.group": "vertical_tabs"},
    # Add a language dropdown into the admin
    "language_chooser": True,
}



JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": False,
    "brand_small_text": False,
    "brand_colour": False,
    "accent": "accent-primary",
    "navbar": "navbar-white navbar-light",
    "no_navbar_border": False,
    "navbar_fixed": False,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": False,
    "sidebar": "sidebar-dark-primary",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": False,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,
    "theme": "default",
    "dark_mode_theme": "darkly",
    "button_classes": {
        "primary": "btn-outline-primary",
        "secondary": "btn-outline-secondary",
        "info": "btn-outline-info",
        "warning": "btn-outline-warning",
        "danger": "btn-outline-danger",
        "success": "btn-outline-success",
    },
}


# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        'SCOPE': {
            'profile',
            'email'
        },
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

SOCIALACCOUNT_LOGIN_ON_GET=True
ACCOUNT_LOGOUT_ON_GET=True
SOCIALACCOUNT_AUTO_SIGNUP = False
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)
EMAIL_HOST = 'mail.dabestconsultant.com'
EMAIL_HOST_USER = 'admin@dabestconsultant.com' # use any valid webmail address
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = '@admD48eST1908!'
EMAIL_PORT = 465
EMAIL_USE_SSL = True
EMAIL_USE_TLS = False
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = "home"
SERVER_EMAIL = EMAIL_HOST_USER

ADMINS = [
    ('admin', 'tazsafakhri@gmail.com'),
    ]
MANAGER = ADMINS
# SOCIALACCOUNT_FORMS = {
#     'signup': 'main.forms.MyCustomSocialSignupForm',
# }
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'  # log while DEBUG=True
        }
    },
    'handlers': {
        'debug_mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            # 'filters': ['require_debug_false'],
        }
    },
    'loggers': {
         'django.request': {
             'handlers':  ['debug_mail_admins',],
             'level': 'DEBUG',
             'propagate': True,
        },
    }
}